@page "/RegisterComponent"
@using System.Text.RegularExpressions
@using System.Net.Mail

<head>
    <link rel="stylesheet" href="../css/component_main_style.css" />
    <link rel="stylesheet" href="../css/register_style.css" />
</head>

<div class="page_container">

    <div class="component_container">

        <div class="title_container">
            <h1>Register Component</h1>
            <div class="underline_container">
                <div class="underline"></div>
            </div>
        </div>

        <div class="component_description">
            <p>
                This component works as a register page. It returns object of new user. I created my own validation mehtods but they can be changed with .Net validation.
            </p>

            <div class="icons_created_with">
                <div class="icon_c">
                    <!--Html-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 84.08 100.02">
                        <title>Html</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <polygon class="fill_white" points="82.55 18.5 83.55 0.5 0.55 0.5 5.55 54.5 59.55 54.5 57.55 74.5 45.55 79.5 28.55 74.5 26.55 65.5 6.55 64.5 8.55 89.5 42.55 99.5 76.55 89.5 79.55 34.5 24.55 34.5 22.55 18.5 82.55 18.5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--CSS-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 84.08 100.02">
                        <title>CSS</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <polygon class="fill_white" points="0.56 0.5 83.56 0.5 82.56 19.5 43.55 34.5 80.56 34.5 76.56 89.5 42.55 99.5 8.55 89.5 6.55 64.5 26.55 64.5 26.55 72.5 40.55 79.5 57.55 74.5 58.55 54.5 5.55 54.5 3.56 34.5 42.55 19.5 2.56 19.5 0.56 0.5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--C#-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 112.47 98.75">
                        <title>C sharp</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <path class="fill_white" d="M70,36.5l21-12C80.63,8.77,67.26,1.37,51.5.56a45.44,45.44,0,0,0-9.17.49C27.49,3.33,15.52,10.31,7.4,23.64A47,47,0,0,0,1.29,40.71,52,52,0,0,0,3.64,67.6c.22.59.46,1.19.74,1.76C11,83.09,21.1,94.1,41,97.5c11.13,1.79,22.4.72,34-7a40.65,40.65,0,0,0,16-17l-21-12a28.09,28.09,0,0,1-18,12c-7.34.8-13.47-1.76-19-6-7.8-6.52-10.27-15.45-7-27,3.7-9,10-13.54,18-15C54.76,23,63,28,70,36.5Z" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="87.97" y="41.5" width="24" height="5" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="91.97" y="37.5" width="5" height="24" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="102.97" y="37.5" width="5" height="24" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="87.97" y="52.5" width="24" height="5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--Blazor-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 159.26 144.76">
                        <title>Blazor</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_12" data-name="Warstwa 12">
                                <g>
                                    <path class="fill_white" d="M121.68,119.5c-17.82,9.45-35.95,15-54.5,15.5-20.42.66-34.6-5.58-45-16a42.48,42.48,0,0,1-13-32c0-12.26,4.38-22.61,11-32,7.39-10.21,16.16-15.86,26-18,11.85-2.12,22.67-2.35,31,2,10.58,6.36,20.31,12.81,23,20,4.88,8.55,9,16.91,8,24,.35,7.49-1,13.91-6,18-4.45,5.54-10.33,7.8-18,6l-8-6-7.92,4.32a20.6,20.6,0,0,1-7.56,2.4,43.81,43.81,0,0,1-6.05.26,20.93,20.93,0,0,1-13.73-5.45,30.05,30.05,0,0,1-4.56-5.44A21,21,0,0,1,33,85.42c0-4.84.8-8.4,2.39-10.51.58-.76,1.18-1.49,1.7-2.3,2.65-4.12,10.33-9.72,10.7-9.94l.24-.15a20,20,0,0,1,9.32-2.85,124.91,124.91,0,0,1,12.84,0,11.82,11.82,0,0,1,8.06,3.71,6.85,6.85,0,0,1,2,3.58l1,25c5.85,8,11.55,9.44,17-1l-1-16c-.52-6.54-4.4-12.43-10-18-5.63-6-13-9.57-22-11-9.42.18-18.34,1-25,5-6.71,3.78-12.44,8.42-16,15-2.8,6.38-4.82,13-5,20,.4,6.47,1.43,12.17,4,16,7.79,10.59,16.7,19.52,30,22a76.6,76.6,0,0,0,28,0c16.2-3.43,29.76-9.53,41-18a100.27,100.27,0,0,0,28-34c4-6,6.33-14.52,8-24,1.55-7.33,1.32-15.42,0-24l-8-24c-8.36,16.43-21.22,27.65-40,32l6-24-29,17h-35C21.46,29,9.11,44.7,2.68,64c-.56,1.7-5.42,28.7-.5,42,5.89,17.15,15.08,28.41,28,33,11.49,5.29,23.87,6.62,36.73,5.27,1.34-.14,2.69-.24,4-.28,8.93-.29,18.5-3.74,28.23-8Z" />
                                    <path class="fill_white" d="M70.18,71l1,20c-22.62,25.21-42.29-9-19-20Z" />
                                </g>
                            </g>
                        </g>
                    </svg>
                </div>
            </div>
        </div>

        <div class="program_container">

            <div class="register_container">
                <div class="register_title_container">
                    <h2>Register</h2>
                    <div class="register_underline_container">
                        <div class="register_underline"></div>
                    </div>
                </div>

                <div class="inputs_container">
                    <div class="input_box username">
                        <label>Username </label>
                        <input @bind="user_name" />
                        <p class="username_info">Username needs to be at least 5 characters long</p>
                    </div>

                    <div class="input_box name">
                        <label>Name </label>
                        <input @bind="name" />
                        <p class="name_info">Name needs to be at least 5 characters long</p>
                    </div>

                    <div class="input_box lastname">
                        <label>Lastname </label>
                        <input @bind="last_name" />
                        <p class="lastname_info">Name needs to be at least 5 characters long</p>
                    </div>

                    <div class="input_box eamil">
                        <label>Email Address </label>
                        <input @bind="email" />
                        <p class="email_info">Name needs to be at least 5 characters long</p>
                    </div>

                    <div class="input_box">
                        <label>Phone Number </label>
                        <input @bind="phone_number" />
                    </div>

                    <div class="input_box password">
                        <label>Password </label>
                        <input @bind="password" />
                        <p class="password_requirements">At least 3 unique characters, 2 numbers, 10 characters long.</p>
                    </div>

                    <div class="input_box">
                        <label>Confirm Password </label>
                        <input @bind="confirm_password" />
                    </div>

                    <div class="input_box_avatars">
                        <p>Choose Avatar </p>
                        @foreach (var icon in userIcons)
                        {
                            <label class="avatar_choice" @onclick="@(e => ChooseAvatar(icon))">
                                <input type="radio" name="test" value="small" checked>
                                <img class="choose_avatar" src="@icon.Path">
                            </label>
                        }
                    </div>

                    <div class="register_button_box">
                        <button @onclick="CreateAccount">Register</button>
                    </div>
                </div>

                <div>
                    <p class="error">@user_name_error</p>
                    <p class="error">@name_error</p>
                    <p class="error">@last_name_error</p>
                    <p class="error">@email_error</p>
                    <p class="error">@phone_number_error</p>
                    <p class="error">@password_error</p>
                    <p class="error">@confirm_password_error</p>
                </div>

            </div>


            <div>
                @foreach (var user in users)
                {
                    <img src="@user.User_Icon.Path" />
                }
            </div>
        </div>
    </div>
</div>

@code{

    public class UserIcon
    {
        public int Id { get; set; }
        public string Path { get; set; }
        public string ImageName { get; set; }

        public UserIcon(){}

        public UserIcon(int id, string path, string imageName)
        {
            this.Id = id;
            this.Path = path;
            this.ImageName = imageName;
        }
    }

    public class User
    {
        public string UserName { get; set; }
        public string Name { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
        public string PhoneNumber { get; set; }
        public string Password { get; set; }
        public UserIcon User_Icon { get; set; }

        public User(){}
    }

    //Paramenters
    [Parameter]
    public int UsernameLenght { get; set; }
    [Parameter]
    public int PasswordLenght { get; set; }
    [Parameter]
    public int PasswordUniqueCharacters_Ammount { get; set; }
    [Parameter]
    public int PasswordNumbers_Ammount { get; set; }
    [Parameter]
    public bool PhoneNumberRequired { get; set; }
    [Parameter]
    public bool NameRequired { get; set; }
    [Parameter]
    public bool LastNameRequired { get; set; }


    //Variables for userinput
    protected string user_name = "";
    protected string name = "";
    protected string last_name = "";
    protected string email = "";
    protected string phone_number = "";
    protected string password = "";
    protected string confirm_password = "";

    //Variables for errors
    protected string user_name_error = "";
    protected string name_error = "";
    protected string last_name_error = "";
    protected string email_error = "";
    protected string phone_number_error = "";
    protected string password_error = "";
    protected string confirm_password_error = "";


    //Mock Data for the user icons
    protected List<UserIcon> userIcons = new List<UserIcon>();

    //Mock Data for user storeage
    protected User new_user = new User();

    protected List<User> users = new List<User>();

    protected override async Task OnInitializedAsync()
    {
        //Adding mock data for the user icons
        UserIcon i1 = new UserIcon(0,"../CommentsImages/1.png", "UserAvatar");
        UserIcon i2 = new UserIcon(1,"../CommentsImages/2.png", "UserAvatar");
        UserIcon i3 = new UserIcon(2,"../CommentsImages/3.png", "UserAvatar");
        UserIcon i4 = new UserIcon(3,"../CommentsImages/4.png", "UserAvatar");

        userIcons.Add(i1);
        userIcons.Add(i2);
        userIcons.Add(i3);
        userIcons.Add(i4);

        new_user.User_Icon = i1;

        //Parameters for demonstration when implementing delete this
        UsernameLenght = 10;
        PasswordLenght = 10;
        PasswordNumbers_Ammount = 3;
        PasswordUniqueCharacters_Ammount = 2;
        PhoneNumberRequired = true;
        NameRequired = true;
        LastNameRequired = true;
    }

    public bool IsValidEmail(string emailaddress)
    {
        if(emailaddress == null || emailaddress.Length < 0)
        {
            return false;
        }
        else
        {
            try
            {
                MailAddress m = new MailAddress(emailaddress);

                return true;
            }
            catch (FormatException)
            {
                return false;
            }
        }
    }

    protected bool validPassowrd;

    public bool IsValidPassword(string password)
    {
        if(password == null || password == "" || password.Length < PasswordLenght)
        {
            return false;
        }
        else
        {
            char[] one = password.ToCharArray();
            char[] two = new char[one.Length];
            int c = 0;
            int n = 0;
            for (int i = 0; i < one.Length; i++) {
                if (!Char.IsLetterOrDigit(one[i])) {
                    two[c] = one[i];
                    c++;
                }
                if(one[i] == '1' || one[i] == '2' || one[i] == '3' || one[i] == '4' || one[i] == '5' || one[i] == '6' || one[i] == '7' || one[i] == '8' || one[i] == '9')
                {
                    n++;
                }
            }
            if(c < PasswordUniqueCharacters_Ammount)
            {
                return false;
            }

            if(n < PasswordNumbers_Ammount)
            {
                return false;
            }
        }
        return true;
    }

    public void ChooseAvatar(UserIcon icon)
    {
        new_user.User_Icon = icon;
    }

    public static bool IsPhoneNumber(string number)
    {
        if(number != null || number.Length > 0)
        {
            return Regex.Match(number, @"^(\+[0-9]{9})$").Success;
        }
        else
        {
            return false;
        }
    }

    public void CreateAccount()
    {
        user_name_error = "";
        name_error = "";
        last_name_error = "";
        email_error = "";
        phone_number_error = "";
        password_error = "";
        confirm_password_error = "";
        bool password_check = false;

        //This variable chcecks if error happend
        bool IsError = false;

        if(user_name == null || user_name.Length < UsernameLenght || user_name == "")
        {
            user_name_error = "User Name needs to be at least " + UsernameLenght + " characters long!";
            IsError = true;
        }

        if(NameRequired == true)
        {
            if(name == "" || name == null || name.Length == 0)
            {
                name_error = "Name is required!";
                IsError = true;
            }
        }

        if(LastNameRequired == true)
        {
            if(last_name == "" || last_name == null ||last_name.Length == 0)
            {
                last_name_error = "Last name is required";
                IsError = true;
            }
        }

        if(PhoneNumberRequired == true)
        {
            if(phone_number == null || phone_number == "")
            {
                phone_number_error = "This is not valid phone number!";
                IsError = true;
            }
            else
            {
                bool validPhone = IsPhoneNumber(phone_number);

                if(validPhone == false)
                {
                    phone_number_error = "This is not valid phone number!";
                    IsError = true;
                }
            }
        }

        if(email != "" || email.Length != 0 || email != null)
        {
            bool email_valid = IsValidEmail(email);
            if(email_valid == false)
            {
                email_error = "Email address is incorrect!";
                IsError = true;
            }
        }
        else
        {
            email_error = "Email address is required!";
            IsError = true;
        }

        if(password != "" || password.Length != 0 || password != null)
        {
            password_check = IsValidPassword(password);
            validPassowrd = IsValidPassword(password);
            if(password_check == false)
            {
                password_error = "Password is incorrect!";
                IsError = true;
            }
        }
        else
        {
            password_error = "Password is required!";
            IsError = true;
        }

        if(password_check == true)
        {
            if(confirm_password != "" || confirm_password != null && confirm_password.Length != 0 && password.Length == confirm_password.Length)
            {
                char[] one = password.ToCharArray();
                char[] two = confirm_password.ToCharArray();

                for(int i = 0; i < one.Length; i++)
                {
                    if(one[i] != two[i])
                    {
                        IsError = true;
                        confirm_password_error = "Passwords are not equal!";
                    }
                }
            }
            else
            {
                confirm_password_error = "Passwords are not equal!";
                IsError = true;
            }
        }

        if(IsError == false)
        {
            User user = new User();

            user.UserName = user_name;

            if(NameRequired == true)
            {
                user.Name = name;
            }

            if (LastNameRequired == true)
            {
                user.LastName = last_name;
            }

            user.Email = email;

            if(PhoneNumberRequired == true)
            {
                user.PhoneNumber = phone_number;
            }

            user.Password = password;

            user.User_Icon = new_user.User_Icon;

            users.Add(user);
        }
    }
}
