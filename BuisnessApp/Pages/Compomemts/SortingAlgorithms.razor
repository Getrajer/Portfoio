@page "/SortingAlgorithms"

<head>
    <link rel="stylesheet" href="../css/component_main_style.css" />
    <link rel="stylesheet" href="../css/sorting_algorithms_style.css" />
</head>

<div class="page_container">
    <div class="component_container">

        <div class="title_container">
            <h1>Sorting Algorithms</h1>
            <div class="underline_container">
                <div class="underline"></div>
            </div>
        </div>

        <div class="component_description">
            <p>
                This component showcases sorting algorithms.
            </p>

            <div class="icons_created_with">
                <div class="icon_c">
                    <!--Html-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 84.08 100.02">
                        <title>Html</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <polygon class="fill_white" points="82.55 18.5 83.55 0.5 0.55 0.5 5.55 54.5 59.55 54.5 57.55 74.5 45.55 79.5 28.55 74.5 26.55 65.5 6.55 64.5 8.55 89.5 42.55 99.5 76.55 89.5 79.55 34.5 24.55 34.5 22.55 18.5 82.55 18.5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--CSS-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 84.08 100.02">
                        <title>CSS</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <polygon class="fill_white" points="0.56 0.5 83.56 0.5 82.56 19.5 43.55 34.5 80.56 34.5 76.56 89.5 42.55 99.5 8.55 89.5 6.55 64.5 26.55 64.5 26.55 72.5 40.55 79.5 57.55 74.5 58.55 54.5 5.55 54.5 3.56 34.5 42.55 19.5 2.56 19.5 0.56 0.5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--C#-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 112.47 98.75">
                        <title>C sharp</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <path class="fill_white" d="M70,36.5l21-12C80.63,8.77,67.26,1.37,51.5.56a45.44,45.44,0,0,0-9.17.49C27.49,3.33,15.52,10.31,7.4,23.64A47,47,0,0,0,1.29,40.71,52,52,0,0,0,3.64,67.6c.22.59.46,1.19.74,1.76C11,83.09,21.1,94.1,41,97.5c11.13,1.79,22.4.72,34-7a40.65,40.65,0,0,0,16-17l-21-12a28.09,28.09,0,0,1-18,12c-7.34.8-13.47-1.76-19-6-7.8-6.52-10.27-15.45-7-27,3.7-9,10-13.54,18-15C54.76,23,63,28,70,36.5Z" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="87.97" y="41.5" width="24" height="5" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="91.97" y="37.5" width="5" height="24" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="102.97" y="37.5" width="5" height="24" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="87.97" y="52.5" width="24" height="5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--Blazor-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 159.26 144.76">
                        <title>Blazor</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_12" data-name="Warstwa 12">
                                <g>
                                    <path class="fill_white" d="M121.68,119.5c-17.82,9.45-35.95,15-54.5,15.5-20.42.66-34.6-5.58-45-16a42.48,42.48,0,0,1-13-32c0-12.26,4.38-22.61,11-32,7.39-10.21,16.16-15.86,26-18,11.85-2.12,22.67-2.35,31,2,10.58,6.36,20.31,12.81,23,20,4.88,8.55,9,16.91,8,24,.35,7.49-1,13.91-6,18-4.45,5.54-10.33,7.8-18,6l-8-6-7.92,4.32a20.6,20.6,0,0,1-7.56,2.4,43.81,43.81,0,0,1-6.05.26,20.93,20.93,0,0,1-13.73-5.45,30.05,30.05,0,0,1-4.56-5.44A21,21,0,0,1,33,85.42c0-4.84.8-8.4,2.39-10.51.58-.76,1.18-1.49,1.7-2.3,2.65-4.12,10.33-9.72,10.7-9.94l.24-.15a20,20,0,0,1,9.32-2.85,124.91,124.91,0,0,1,12.84,0,11.82,11.82,0,0,1,8.06,3.71,6.85,6.85,0,0,1,2,3.58l1,25c5.85,8,11.55,9.44,17-1l-1-16c-.52-6.54-4.4-12.43-10-18-5.63-6-13-9.57-22-11-9.42.18-18.34,1-25,5-6.71,3.78-12.44,8.42-16,15-2.8,6.38-4.82,13-5,20,.4,6.47,1.43,12.17,4,16,7.79,10.59,16.7,19.52,30,22a76.6,76.6,0,0,0,28,0c16.2-3.43,29.76-9.53,41-18a100.27,100.27,0,0,0,28-34c4-6,6.33-14.52,8-24,1.55-7.33,1.32-15.42,0-24l-8-24c-8.36,16.43-21.22,27.65-40,32l6-24-29,17h-35C21.46,29,9.11,44.7,2.68,64c-.56,1.7-5.42,28.7-.5,42,5.89,17.15,15.08,28.41,28,33,11.49,5.29,23.87,6.62,36.73,5.27,1.34-.14,2.69-.24,4-.28,8.93-.29,18.5-3.74,28.23-8Z" />
                                    <path class="fill_white" d="M70.18,71l1,20c-22.62,25.21-42.29-9-19-20Z" />
                                </g>
                            </g>
                        </g>
                    </svg>
                </div>
            </div>
        </div>



        <button class="btn btn-primary" @onclick="PopulateChart">Populate Chart</button>
        <button class="btn btn-primary" @onclick="BubbleSort">Do buble sort</button>
        <button class="btn btn-primary" @onclick="QuickSortChart">Do Quick Sort</button>
        <button class="btn btn-primary" @onclick="SelectionSort">Do Selection Sort</button>
        <button class="btn btn-primary" @onclick="InsertionSort">Do Insertion Sort</button>

        <section id="chart-container">

            <div class="box">
                <div class="scale top-scale">@top_scale</div>
                <div class="scale middle-scale">@middle_scale</div>
                <div class="scale bottom-scale">@bottom_scale</div>

                @foreach (var obj in graphData)
                {
                    <div class="variable">
                        <div class="graph" style="height: @obj.returnPercentage()">
                            <div class="percent">
                                @obj.number
                            </div>
                        </div>
                        <div class="name">
                            @obj.name
                        </div>
                    </div>
                }
            </div>
        </section>
    </div>
</div>


@code{
    //Graph object class
    public class graphObject
    {
        public int number { get; set; }
        public int percentage { get; set; }
        public string name { get; set; }

        public graphObject()
        {
        }

        public graphObject(int _number)
        {
            this.number = _number;
        }

        public graphObject(int _number, string _name)
        {
            this.number = _number;
            this.name = _name;
        }

        public string returnPercentage()
        {
            string p = percentage.ToString() + "%";
            return p;
        }
    }
    //..............................................................................//


    //Declaring variables connected to razor page
    protected string success_populate;
    protected string error_populate;

    protected string success_sort;
    protected string error_sort;

    protected List<graphObject> graphData = new List<graphObject>();

    protected string top_scale;
    protected string middle_scale;
    protected static string bottom_scale = "0";
    //..............................................................................//


    //This Function will populate chart with 100 random numbers from range 1 - 100
    public async void PopulateChart()
    {
        //Restet Chart
        graphData.Clear();

        for (int i = 0; i < 200; i++)
        {
            Random random = new Random();
            graphObject g = new graphObject();
            g.number = random.Next(1, 100);
            graphData.Add(g);
        }

        if (graphData.Count == 0)
        {
            error_populate = "Ups something went wrong try again";
            StateHasChanged();
        }
        else
        {
            int largest = 0;

            //Find LargestNumber
            for (int i = 0; i < graphData.Count; i++)
            {
                if (largest <= graphData[i].number)
                {
                    largest = graphData[i].number;
                }
            }

            //Calculate Percentage
            for (int i = 0; i < graphData.Count; i++)
            {
                graphData[i].percentage = (int)Math.Round((double)(100 * graphData[i].number) / largest);
                top_scale = largest.ToString();
                middle_scale = ((int)Math.Round((double)largest / 2)).ToString();
            }
            success_populate = "Success!";
            await Task.Delay(100);
            StateHasChanged();
        }
    }
    //..............................................................................//


    //Bubble Sort Algorithm
    public async void BubbleSort()
    {
        //Reset communicates
        success_populate = "";
        success_sort = "";
        error_sort = "";
        error_populate = "";

        if (graphData == null || graphData.Count == 0)
        {
            error_sort = "Chart is empty cannot sort it!";
        }
        else
        {
            graphObject holder;
            int counter = graphData.Count();

            for (int i = 0; i < counter - 1; i++)
            {
                for (int j = 0; j < counter - i - 1; j++)
                {
                    if (graphData[j].number > graphData[j + 1].number)
                    {
                        holder = graphData[j];
                        graphData[j] = graphData[j + 1];
                        graphData[j + 1] = holder;

                        await Task.Delay(1);
                        StateHasChanged();
                    }
                }
            }
            success_sort = "Success!";
            StateHasChanged();
        }
    }
    //..............................................................................//


    //Quick Sort Algorithm
    public async void quickSort(List<graphObject> graphObjects, int start, int end)
    {
        int i;
        if (start < end)
        {
            i = Partition(graphObjects, start, end);

            quickSort(graphObjects, start, i - 1);
            await Task.Delay(1000);
            StateHasChanged();
            quickSort(graphObjects, i + 1, end);
            await Task.Delay(1000);
            StateHasChanged();

        }
    }

    private int Partition(List<graphObject> graphObjects, int start, int end)
    {
        graphObject temp;
        graphObject p = graphObjects[end];
        int i = start - 1;

        for (int j = start; j <= end - 1; j++)
        {
            if (graphObjects[j].number <= p.number)
            {
                i++;
                temp = graphObjects[i];
                graphObjects[i] = graphObjects[j];
                graphObjects[j] = temp;
            }
        }

        temp = graphObjects[i + 1];
        graphObjects[i + 1] = graphObjects[end];
        graphObjects[end] = temp;
        return i + 1;
    }

    public async void QuickSortChart()
    {
        //Reset communicates
        success_populate = "";
        success_sort = "";
        error_sort = "";
        error_populate = "";

        if (graphData == null || graphData.Count == 0)
        {
            error_sort = "Chart is empty cannot sort it!";
        }
        else
        {
            quickSort(graphData, 0, graphData.Count - 1);

            success_sort = "Success!";
            StateHasChanged();
        }
    }
    //..............................................................................//


    //Selection sort algorithm
    public async void SelectionSort()
    {
        //Reset communicates
        success_populate = "";
        success_sort = "";
        error_sort = "";
        error_populate = "";

        if (graphData == null || graphData.Count == 0)
        {
            error_sort = "Chart is empty cannot sort it!";
        }
        else
        {
            bool isSorted = false;
            do
            {

                for (int i = 0; i < graphData.Count - 1; i++)
                {
                    graphObject o = new graphObject();
                    graphObject smallest = new graphObject();
                    int minIndex = i;
                    for (int j = i + 1; j < graphData.Count; j++)
                    {
                        if (graphData[j].number < graphData[i].number)
                        {
                            minIndex = j;
                        }
                    }
                    o = graphData[minIndex];
                    graphData[minIndex] = graphData[i];
                    graphData[i] = o;
                    await Task.Delay(5);
                    StateHasChanged();
                }

                for (int i = 0; i < graphData.Count - 1; i++)
                {
                    graphObject t = graphData[i];

                    if (graphData[i + 1].number < t.number)
                    {
                        isSorted = true;
                    }
                    else
                    {
                        isSorted = false;
                    }
                }

            } while (isSorted != true);

            success_sort = "Success!";
            StateHasChanged();
        }
    }
    //..............................................................................//



    //Insertion sort algorithm
    public async void InsertionSort()
    {
        //Reset communicates
        success_populate = "";
        success_sort = "";
        error_sort = "";
        error_populate = "";

        if (graphData == null || graphData.Count == 0)
        {
            error_sort = "Chart is empty cannot sort it!";
        }
        else
        {
            int n = graphData.Count;
            for (int i = 1; i < n; ++i)
            {
                graphObject key = graphData[i];
                int j = i - 1;

                while (j >= 0 && graphData[j].number > key.number)
                {
                    graphData[j + 1] = graphData[j];
                    j = j - 1;
                }
                graphData[j + 1] = key;
                await Task.Delay(10);
                StateHasChanged();
            }
            success_sort = "Success!";
            StateHasChanged();
        }
    }
    //..............................................................................//
}