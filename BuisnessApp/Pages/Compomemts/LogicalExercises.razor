@page "/LogicalExercises"
@using System.Text

<head>
    <link rel="stylesheet" href="../css/component_main_style.css" />
    <link rel="stylesheet" href="../css/logical_exercises_style.css" />
</head>

<div class="page_container">

    <div class="component_container">

        <div class="title_container">
            <h1>Logical Exercises</h1>
            <div class="underline_container">
                <div class="underline"></div>
            </div>
        </div>

        <div class="component_description">
            <p>
                In this component I am presenting solutions to some logical problems.
            </p>

            <div class="icons_created_with">
                <div class="icon_c">
                    <!--Html-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 84.08 100.02">
                        <title>Html</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <polygon class="fill_white" points="82.55 18.5 83.55 0.5 0.55 0.5 5.55 54.5 59.55 54.5 57.55 74.5 45.55 79.5 28.55 74.5 26.55 65.5 6.55 64.5 8.55 89.5 42.55 99.5 76.55 89.5 79.55 34.5 24.55 34.5 22.55 18.5 82.55 18.5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--CSS-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 84.08 100.02">
                        <title>CSS</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <polygon class="fill_white" points="0.56 0.5 83.56 0.5 82.56 19.5 43.55 34.5 80.56 34.5 76.56 89.5 42.55 99.5 8.55 89.5 6.55 64.5 26.55 64.5 26.55 72.5 40.55 79.5 57.55 74.5 58.55 54.5 5.55 54.5 3.56 34.5 42.55 19.5 2.56 19.5 0.56 0.5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--C#-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 112.47 98.75">
                        <title>C sharp</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_11" data-name="Warstwa 11">
                                <path class="fill_white" d="M70,36.5l21-12C80.63,8.77,67.26,1.37,51.5.56a45.44,45.44,0,0,0-9.17.49C27.49,3.33,15.52,10.31,7.4,23.64A47,47,0,0,0,1.29,40.71,52,52,0,0,0,3.64,67.6c.22.59.46,1.19.74,1.76C11,83.09,21.1,94.1,41,97.5c11.13,1.79,22.4.72,34-7a40.65,40.65,0,0,0,16-17l-21-12a28.09,28.09,0,0,1-18,12c-7.34.8-13.47-1.76-19-6-7.8-6.52-10.27-15.45-7-27,3.7-9,10-13.54,18-15C54.76,23,63,28,70,36.5Z" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="87.97" y="41.5" width="24" height="5" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="91.97" y="37.5" width="5" height="24" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="102.97" y="37.5" width="5" height="24" style="stroke-miterlimit: 10" />
                                <rect class="fill_white" x="87.97" y="52.5" width="24" height="5" style="stroke-miterlimit: 10" />
                            </g>
                        </g>
                    </svg>
                </div>
                <div class="icon_c">
                    <!--Blazor-->
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 159.26 144.76">
                        <title>Blazor</title>
                        <g id="Warstwa_2" data-name="Warstwa 2">
                            <g id="Warstwa_12" data-name="Warstwa 12">
                                <g>
                                    <path class="fill_white" d="M121.68,119.5c-17.82,9.45-35.95,15-54.5,15.5-20.42.66-34.6-5.58-45-16a42.48,42.48,0,0,1-13-32c0-12.26,4.38-22.61,11-32,7.39-10.21,16.16-15.86,26-18,11.85-2.12,22.67-2.35,31,2,10.58,6.36,20.31,12.81,23,20,4.88,8.55,9,16.91,8,24,.35,7.49-1,13.91-6,18-4.45,5.54-10.33,7.8-18,6l-8-6-7.92,4.32a20.6,20.6,0,0,1-7.56,2.4,43.81,43.81,0,0,1-6.05.26,20.93,20.93,0,0,1-13.73-5.45,30.05,30.05,0,0,1-4.56-5.44A21,21,0,0,1,33,85.42c0-4.84.8-8.4,2.39-10.51.58-.76,1.18-1.49,1.7-2.3,2.65-4.12,10.33-9.72,10.7-9.94l.24-.15a20,20,0,0,1,9.32-2.85,124.91,124.91,0,0,1,12.84,0,11.82,11.82,0,0,1,8.06,3.71,6.85,6.85,0,0,1,2,3.58l1,25c5.85,8,11.55,9.44,17-1l-1-16c-.52-6.54-4.4-12.43-10-18-5.63-6-13-9.57-22-11-9.42.18-18.34,1-25,5-6.71,3.78-12.44,8.42-16,15-2.8,6.38-4.82,13-5,20,.4,6.47,1.43,12.17,4,16,7.79,10.59,16.7,19.52,30,22a76.6,76.6,0,0,0,28,0c16.2-3.43,29.76-9.53,41-18a100.27,100.27,0,0,0,28-34c4-6,6.33-14.52,8-24,1.55-7.33,1.32-15.42,0-24l-8-24c-8.36,16.43-21.22,27.65-40,32l6-24-29,17h-35C21.46,29,9.11,44.7,2.68,64c-.56,1.7-5.42,28.7-.5,42,5.89,17.15,15.08,28.41,28,33,11.49,5.29,23.87,6.62,36.73,5.27,1.34-.14,2.69-.24,4-.28,8.93-.29,18.5-3.74,28.23-8Z" />
                                    <path class="fill_white" d="M70.18,71l1,20c-22.62,25.21-42.29-9-19-20Z" />
                                </g>
                            </g>
                        </g>
                    </svg>
                </div>
            </div>
        </div>

        <div class="title_container_s">
            <h2>Remove Duplicates</h2>
        </div>

        <div class="program_container">
            <div class="row">
                <div class="col-md-3">
                    <div class="program_start_container">
                        <div class="input_container">
                            <h5>Write something: </h5>
                            <input @bind-value="str_rd" @bind-value:event="oninput" />
                        </div>
                        <div class="start_container">
                            <button class="btn btn-primary" @onclick="RemoveDuplicates">Remove Duplicates</button>
                        </div>
                        <div class="info_container">
                            <span class="sucess">@success</span> <span class="error">@error</span>
                        </div>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="output_container">

                        <h4 class="p-2">String after: @after_rd</h4>

                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Character</th>
                                    <th>Removed</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{

                                    foreach (var el in duplicatesList)
                                    {
                                        <tr>
                                            <td>@el.Character</td>
                                            <td>@el.Quantity</td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="title_container_s">
            <h2>Is Prime</h2>
        </div>

        <div class="program_container">
            <div class="row">
                <div class="col-md-3">
                    <div class="program_start_container">
                        <div class="input_container">
                            <h5>Enter a number: </h5>
                            <input @bind-value="number_pr" @bind-value:event="oninput" />
                        </div>
                        <div class="start_container">
                            <button class="btn btn-primary" @onclick="isPrime">Check if prime</button>
                        </div>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="output_container single_values">
                        <h4>Is Prime:</h4>
                        <p>@output_pr</p>
                    </div>
                </div>
            </div>
        </div>


        <div class="title_container_s">
            <h2>Is Pallindrome</h2>
        </div>

        <div class="program_container">
            <div class="row">
                <div class="col-md-3">
                    <div class="program_start_container">
                        <div class="input_container">
                            <h5>Enter somethig: </h5>
                            <input @bind-value="str_pal" @bind-value:event="oninput" />
                        </div>
                        <div class="start_container">
                            <button class="btn btn-primary" @onclick="IsPalindrome">Check if palindrome</button>
                        </div>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="output_container single_values">
                        <h4>Is Palindrome: </h4>
                        <p>@isPalindrome_pal</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="title_container_s">
            <h2>Sum All Digits</h2>
        </div>

        <div class="program_container">

            <div class="row">
                <div class="col-md-3">
                    <div class="program_start_container">
                        <div class="input_container">
                            <h5>Enter a number: </h5>
                            <input @bind-value="number_sum_all" @bind-value:event="oninput" />
                        </div>
                        <div class="start_container">
                            <button class="btn btn-primary" @onclick="sumDigits">Sum all digits</button>
                        </div>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="output_container single_values">
                        <h4>Value Before:</h4>
                        <p>@number_sum_all</p>
                        <h4>Value After:</h4>
                        <p>@output_sum_all</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="title_container_s">
            <h2>Reverse Word Order</h2>
        </div>
        <div class="program_container">

            <div class="row">
                <div class="col-md-3">
                    <div class="program_start_container">
                        <div class="input_container">
                            <h5>Enter anything: </h5>
                            <input @bind-value="str_reverse" @bind-value:event="oninput" />
                        </div>
                        <div class="start_container">
                            <button class="btn btn-primary" @onclick="ReverseWordOrder">Reverse String</button>
                        </div>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="output_container single_values">
                        <h4>Value before:</h4>
                        <p>@str_reverse</p>
                        <h4>Value after:</h4>
                        <p>@reversed_reverse</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="title_container_s">
            <h2>Reverse Each Word</h2>
        </div>
        <div class="program_container">
            <div class="row">
                <div class="col-md-3">
                    <div class="program_start_container">
                        <div class="input_container">
                            <h5>Enter anything: </h5>
                            <input @bind-value="str_r_each" @bind-value:event="oninput" />
                        </div>
                        <div class="start_container">
                            <button class="btn btn-primary" @onclick="ReverseWords">Reverse Words</button>
                        </div>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="output_container single_values">
                        <h4>Value before:</h4>
                        <p>@str_r_each</p>
                        <h4>Value after:</h4>
                        <p>@reversed_r_each</p>
                    </div>
                </div>
            </div>
        </div>

        <div class="title_container_s">
            <h2>Reverse String</h2>
        </div>

        <div class="program_container">
            <div class="row">
                <div class="col-md-3">
                    <div class="program_start_container">
                        <div class="input_container">
                            <h5>Enter a anything: </h5>
                            <input @bind-value="str_r" @bind-value:event="oninput" />
                        </div>
                        <div class="start_container">
                            <button class="btn btn-primary" @onclick="ReverseText">Reverse String</button>
                        </div>
                    </div>
                </div>

                <div class="col-md-9">
                    <div class="output_container single_values">
                        <h4>Value before:</h4>
                        <p>@str_r</p>
                        <h4>Value after:</h4>
                        <p>@reversed_r</p>
                    </div>
                </div>
            </div>
        </div>



    </div>
</div>

@code{

        /// <summary>
        /// This section is for Summ all Digits 
        /// </summary

        protected int number_sum_all;
        protected int output_sum_all;

        protected string success;
        protected string error;

        public async void sumDigits()
        {
            //Reset error message
            error = "";
            //Reset sucess message
            success = " ";

            if (number_sum_all < 1)
            {
                error = "Plese enter valid number higher than 0";
            }
            else
            {
                int sum = 0;
                int num = number_sum_all;;
                while (num > 0)
                {
                    sum = sum + num % 10;
                    num /= 10;
                    output_sum_all = sum;
                    StateHasChanged();

                }
                await Task.Delay(500);
                success = "Success!";
                StateHasChanged();
            }
        }

    //////////////////////////////////////////////////////////////////////
    /// <summary>
    /// This Section is for revese word order
    /// </summary>
    ////


        protected string str_reverse;
        protected string reversed_reverse;

        protected string success_reverse;
        protected string error_reverse;

        public async void ReverseWordOrder()
        {
            error_reverse = "";
            success_reverse = "";

            if(str_reverse == null)
            {
                error_reverse = "Enter anything to start program";
            }
            else
            {
                int i;
                StringBuilder reverseSentence = new StringBuilder();

                int Start = str_reverse.Length - 1;
                int End = str_reverse.Length - 1;

                while (Start > 0)
                {
                    if (str_reverse[Start] == ' ')
                    {
                        i = Start + 1;
                        while (i <= End)
                        {
                            reverseSentence.Append(str_reverse[i]);
                            i++;
                        }
                        reverseSentence.Append(' ');
                        End = Start - 1;
                    }
                    Start--;
                }

                for (i = 0; i <= End; i++)
                {
                    reverseSentence.Append(str_reverse[i]);

                }

                success_reverse = "Success!";
                StateHasChanged();
                reversed_reverse = reverseSentence.ToString();
            }
           
        }

    ////////////////////////////////////////////////////////////////
    /// <summary>
    /// This section Belongs to reverse each word
    /// </summary>
 

        protected string str_r_each;
        protected string reversed_r_each;
        protected string error_r_each;
        protected string success_r_each;

        public void ReverseWords()
        {

            if(str_r_each == null)
            {
                error_r_each = "Please enter anything";
            }

            else
            {
                StringBuilder output = new StringBuilder();
                List<char> charList = new List<char>();

                for (int i = 0; i < str_r_each.Length; i++)
                {
                    if (str_r_each[i] == ' ' || i == str_r_each.Length - 1)
                    {
                        if (i == str_r_each.Length - 1)
                        {
                            charList.Add(str_r_each[i]);
                        }

                        for (int j = charList.Count - 1; j >= 0; j--)
                        {
                            output.Append(charList[j]);
                        }
                        output.Append(' ');
                        charList = new List<char>();

                    }
                    else
                    {
                        charList.Add(str_r_each[i]);
                    }
                }

                reversed_r_each = output.ToString();
            }
        }

    ////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// This section is for reverse string
    /// </summary>


    string str_r;
    string reversed_r;
    string error_r;
    string success_r;

    async void ReverseText()
    {
        if(str_r == null)
        {
            error = "Please write something";
        }
        else
        {
            char[] charArray = str_r.ToCharArray();
            for (int i = 0, j = str_r.Length - 1; i < j; i++, j--)
            {
                charArray[i] = str_r[j];
                charArray[j] = str_r[i];
            }

            string reversedstring = new string(charArray);
            reversed_r = reversedstring;
            success_r = "Success!";
         
        }

    }

    /////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// /This section is for remove duplicates
    /// </summary>




    protected class Duplicates
        {
            public int Quantity { get; set; }
            public string Character { get; set; }

            public Duplicates(int quantity, string character)
            {
                this.Quantity = quantity;
                this.Character = character;
            }
        }

        protected string str_rd;
        protected string after_rd;
        protected string error_rd;
        protected string success_rd;
        protected List<Duplicates> duplicatesList = new List<Duplicates>();


        public void RemoveDuplicates() {

            if(str_rd == null)
            {
                error_rd = "Please write something";
            }
            else
            {
                string newString = string.Empty;
                List<char> found = new List<char>();
                foreach (char c in str_rd)
                {
                    if (found.Contains(c))
                        continue;

                    newString += c.ToString();
                    found.Add(c);
                }

                after_rd = newString;

                //Statistics by using counting occurence function
                char[] charSentence = str_rd.ToCharArray();
                duplicatesList.Clear();

                for (int i = 0; i < charSentence.Length; i++)
                {
                    if (charSentence[i] != ' ')
                    {
                        char c = charSentence[i];
                        string cS = c.ToString();
                        int counter = 0;

                        for (int j = 0; j < charSentence.Length; j++)
                        {
                            if (c == charSentence[j])
                            {
                                counter++;
                                charSentence[j] = ' ';
                            }
                        }

                        if (counter == 0)
                        {
                            Duplicates oc = new Duplicates(counter, cS);
                            duplicatesList.Add(oc);
                        }
                        else
                        {
                            Duplicates oc = new Duplicates(counter - 1, cS);
                            duplicatesList.Add(oc);
                        }
                    }
                }
            }

        }


    //////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>
    /// This section is for is palindrome program
    /// </summary>


    string str_pal;
    string isPalindrome_pal;
    int counterP_pal = 0;
    string success_pal;
    string error_pal;


    void IsPalindrome()
    {
        if(str_pal == null)
        {
            error_pal = "Please enter something";
        }
        else
        {
            char[] strC = str_pal.ToCharArray();
        int lenght = str_pal.Length - 1;

        for (int i = lenght; i > 0; i--)
        {
            int j = 0;
            if (strC[i] == strC[j])
            {
                counterP_pal++;
            }
            j++;
        }

        if (counterP_pal == lenght)
        {
            //If is palindrome
            isPalindrome_pal = "Yes";
        }
        else
        {
            //If is not palindrome
            isPalindrome_pal = "No";
        }

        //Reset Counter
        counterP_pal = 0;

        }


    }


    //////////////////////
    /////
    /// <summary>
    /// This section is for is prime
    /// </summary>

        protected int number_pr;
        protected string output_pr;

        protected string success_pr;
        protected string error_pr;

        public async void isPrime()
        {

            //Reset error message
            error_pr = "";
            //Reset sucess message
            success_pr = " ";

            bool checker = false;
            if(number_pr < 1)
            {
                error_pr = "Please enter a valid number greater than 1";
            }
            else
            {
                if(number_pr == 1) {checker = true; }
                if (number_pr == 2) {checker = true; }
                if (number_pr % 2 == 0) {checker = true; }

                var squareRoot = (int)Math.Floor(Math.Sqrt(number_pr));

                for(int i = 3; i <= squareRoot; i = i + 2)
                {
                    if (number_pr % i == 0) { checker = true; }
                }
                
                if(checker)
                {
                    output_pr = "It is not a prime number";
                    await Task.Delay(500);
                    success_pr = "Success!";
                    StateHasChanged();
                }
                else
                {
                    output_pr = "It is a prime number";
                    await Task.Delay(500);
                    success_pr = "Success!";
                    StateHasChanged();
                }
            }
        }

}